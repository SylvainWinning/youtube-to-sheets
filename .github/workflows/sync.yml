name: YouTube to Sheets Sync

on:
  # Lancement manuel si besoin
  workflow_dispatch: {}

  # PLANIFICATION EXACTE (Europe/Paris) sans exécutions inutiles
  #
  # Heures demandées (heure de Paris) :
  # 00:00, 01:00, 02:00, 12:00, 13:00, 14:00, 20:00, 21:00, 22:00, 23:00
  #
  # Conversion en UTC selon la saison :
  # - CEST (heure d'été, UTC+2)  -> UTC = heure - 2
  # - CET  (heure d'hiver, UTC+1) -> UTC = heure - 1
  #
  # Découpage par mois pour coller aux changements d'heure en Europe :
  # - CEST sûr : avril à septembre + 1–24 octobre + 25–31 mars
  # - CET  sûr : novembre à février + 1–24 mars + 25–31 octobre

  schedule:
    # -------- CEST (UTC+2) --------
    # Avril à septembre (mois 4–9)
    - cron: "0 10 * 4-9 *"   # 12:00 Paris
    - cron: "0 11 * 4-9 *"   # 13:00 Paris
    - cron: "0 12 * 4-9 *"   # 14:00 Paris
    - cron: "0 18 * 4-9 *"   # 20:00 Paris
    - cron: "0 19 * 4-9 *"   # 21:00 Paris
    - cron: "0 20 * 4-9 *"   # 22:00 Paris
    - cron: "0 21 * 4-9 *"   # 23:00 Paris
    - cron: "0 22 * 4-9 *"   # 00:00 Paris
    - cron: "0 23 * 4-9 *"   # 01:00 Paris
    - cron: "0 0  * 4-9 *"   # 02:00 Paris

    # 1–24 octobre (toujours CEST)
    - cron: "0 10 1-24 10 *"
    - cron: "0 11 1-24 10 *"
    - cron: "0 12 1-24 10 *"
    - cron: "0 18 1-24 10 *"
    - cron: "0 19 1-24 10 *"
    - cron: "0 20 1-24 10 *"
    - cron: "0 21 1-24 10 *"
    - cron: "0 22 1-24 10 *"
    - cron: "0 23 1-24 10 *"
    - cron: "0 0  1-24 10 *"

    # 25–31 mars (déjà CEST après le changement)
    - cron: "0 10 25-31 3 *"
    - cron: "0 11 25-31 3 *"
    - cron: "0 12 25-31 3 *"
    - cron: "0 18 25-31 3 *"
    - cron: "0 19 25-31 3 *"
    - cron: "0 20 25-31 3 *"
    - cron: "0 21 25-31 3 *"
    - cron: "0 22 25-31 3 *"
    - cron: "0 23 25-31 3 *"
    - cron: "0 0  25-31 3 *"

    # -------- CET (UTC+1) --------
    # Novembre à février (mois 11,12,1,2)
    - cron: "0 11 * 11,12,1,2 *"  # 12:00 Paris
    - cron: "0 12 * 11,12,1,2 *"  # 13:00 Paris
    - cron: "0 13 * 11,12,1,2 *"  # 14:00 Paris
    - cron: "0 19 * 11,12,1,2 *"  # 20:00 Paris
    - cron: "0 20 * 11,12,1,2 *"  # 21:00 Paris
    - cron: "0 21 * 11,12,1,2 *"  # 22:00 Paris
    - cron: "0 22 * 11,12,1,2 *"  # 23:00 Paris
    - cron: "0 23 * 11,12,1,2 *"  # 00:00 Paris
    - cron: "0 0  * 11,12,1,2 *"  # 01:00 Paris
    - cron: "0 1  * 11,12,1,2 *"  # 02:00 Paris

    # 1–24 mars (encore CET)
    - cron: "0 11 1-24 3 *"
    - cron: "0 12 1-24 3 *"
    - cron: "0 13 1-24 3 *"
    - cron: "0 19 1-24 3 *"
    - cron: "0 20 1-24 3 *"
    - cron: "0 21 1-24 3 *"
    - cron: "0 22 1-24 3 *"
    - cron: "0 23 1-24 3 *"
    - cron: "0 0  1-24 3 *"
    - cron: "0 1  1-24 3 *"

    # 25–31 octobre (déjà CET après le changement)
    - cron: "0 11 25-31 10 *"
    - cron: "0 12 25-31 10 *"
    - cron: "0 13 25-31 10 *"
    - cron: "0 19 25-31 10 *"
    - cron: "0 20 25-31 10 *"
    - cron: "0 21 25-31 10 *"
    - cron: "0 22 25-31 10 *"
    - cron: "0 23 25-31 10 *"
    - cron: "0 0  25-31 10 *"
    - cron: "0 1  25-31 10 *"

permissions:
  contents: read

concurrency:
  group: youtube-to-sheets-sync
  cancel-in-progress: false

jobs:
  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest

      - name: Run tests
        run: pytest -q

  sync:
    name: Sync playlist to Google Sheets
    needs: tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
      SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Sanity check secrets
        run: |
          test -n "${YOUTUBE_API_KEY}" || (echo "Secret YOUTUBE_API_KEY manquant" && exit 1)
          test -n "${SPREADSHEET_ID}" || (echo "Secret SPREADSHEET_ID manquant" && exit 1)
          test -n "${SERVICE_ACCOUNT_JSON}" || (echo "Secret SERVICE_ACCOUNT_JSON manquant" && exit 1)

      - name: Write Google service account key
        run: |
          python - << 'PY'
          import os, json, sys, base64
          raw = os.environ.get("SERVICE_ACCOUNT_JSON", "")

          def try_write(content: str) -> bool:
            try:
              json.loads(content)
            except json.JSONDecodeError:
              return False
            else:
              with open("service_account.json", "w", encoding="utf-8") as f:
                f.write(content)
              return True

          if try_write(raw): sys.exit(0)
          fixed = raw.replace("\\n", "\n").replace("\\r", "\r")
          if try_write(fixed): sys.exit(0)
          try:
            decoded = base64.b64decode(raw).decode("utf-8", "strict")
            if try_write(decoded): sys.exit(0)
          except Exception:
            pass
          print("SERVICE_ACCOUNT_JSON n'est pas un JSON valide.")
          sys.exit(1)
          PY

      - name: Run sync
        run: python main.py
