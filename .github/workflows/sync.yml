name: YouTube to Sheets Sync

on:
  # Lancement manuel possible à tout moment
  workflow_dispatch: {}

  # Déclenche toutes les heures, le job "gate" filtrera pour ne laisser passer
  # que les heures autorisées en Europe/Paris
  schedule:
    - cron: "0 * * * *"

permissions:
  contents: read

concurrency:
  group: youtube-to-sheets-sync
  cancel-in-progress: false

jobs:
  gate:
    name: Time gate (Europe/Paris)
    runs-on: ubuntu-latest
    outputs:
      allow: ${{ steps.set.outputs.allow }}
      hour: ${{ steps.set.outputs.hour }}
    steps:
      - id: set
        name: Compute allowed hour
        shell: bash
        run: |
          # Autoriser tout de suite si ce n'est pas un run planifié
          if [ "${{ github.event_name }}" != "schedule" ]; then
            echo "allow=true" >> "$GITHUB_OUTPUT"
            echo "hour=manual" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Heures autorisées en Europe/Paris
          ALLOWED="00 01 02 12 13 14 20 21 22 23"

          # Heure locale Europe/Paris
          HOUR=$(TZ=Europe/Paris date +%H)

          if echo "$ALLOWED" | grep -qw "$HOUR"; then
            echo "allow=true" >> "$GITHUB_OUTPUT"
          else
            echo "allow=false" >> "$GITHUB_OUTPUT"
          fi

          echo "hour=$HOUR" >> "$GITHUB_OUTPUT"

      - name: Skip info when hour is not allowed
        if: ${{ steps.set.outputs.allow != 'true' }}
        run: |
          echo "Heure actuelle non autorisée: $(TZ=Europe/Paris date)."
          echo "Heures autorisées: 00, 01, 02, 12, 13, 14, 20, 21, 22, 23."

  tests:
    name: Run unit tests
    needs: gate
    if: ${{ needs.gate.outputs.allow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest

      - name: Run tests
        run: pytest -q

  sync:
    name: Sync playlist to Google Sheets
    needs: [gate, tests]
    if: ${{ needs.gate.outputs.allow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      SPREADSHEET_ID: ${{ secrets.SPREADSHEET_ID }}
      SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Sanity check required secrets
        run: |
          test -n "${YOUTUBE_API_KEY}" || (echo "Secret YOUTUBE_API_KEY manquant" && exit 1)
          test -n "${SPREADSHEET_ID}" || (echo "Secret SPREADSHEET_ID manquant" && exit 1)
          test -n "${SERVICE_ACCOUNT_JSON}" || (echo "Secret SERVICE_ACCOUNT_JSON manquant" && exit 1)

      - name: Prepare Google service account key
        run: |
          python - << 'PY'
          import os, json, sys, base64
          raw = os.environ.get("SERVICE_ACCOUNT_JSON", "")

          def try_write(content: str) -> bool:
            try:
              json.loads(content)
            except json.JSONDecodeError:
              return False
            else:
              with open("service_account.json", "w", encoding="utf-8") as f:
                f.write(content)
              return True

          # 1) Essaye tel quel (JSON brut multi-ligne)
          if try_write(raw):
            sys.exit(0)

          # 2) Remplace \n échappés par vraies nouvelles lignes
          fixed = raw.replace("\\n", "\n").replace("\\r", "\r")
          if try_write(fixed):
            sys.exit(0)

          # 3) Si jamais le secret est en base64
          try:
            decoded = base64.b64decode(raw).decode("utf-8", "strict")
            if try_write(decoded):
              sys.exit(0)
          except Exception:
            pass

          print("SERVICE_ACCOUNT_JSON n'est pas un JSON valide.")
          sys.exit(1)
          PY

      - name: Run sync
        run: |
          echo "Heure Europe/Paris: ${{ needs.gate.outputs.hour }}"
          python main.py
